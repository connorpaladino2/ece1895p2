#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Servo.h>
#include <Adafruit_SSD1306.h>
#include <SoftwareSerial.h>
#include <DFRobotDFPlayerMini.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET     -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const int motor = 6;
Servo servo;
const int trigPin = 7;
const int echoPin = 8;
const int trigPin2 = 10;
const int echoPin2 = 9;
const int button = 4;
bool cmd_given = false;
int time;
int score = 0;
int curr_time = 0;
const int joystickY = A0;
int pos = 90;

int cmd = -1; 

// Create a SoftwareSerial for MP3 on PD2 and PD5 (pins 2 and 5)
SoftwareSerial mp3Serial(2, 5); // (RX, TX)
DFRobotDFPlayerMini mp3;

void setup() {
  // Initialize the OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    for (;;); // stuck if display init fails
  }

  // Initial countdown on the display
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 10);
  display.println("3");
  display.display();
  delay(1000);
 
  display.clearDisplay();
  display.setCursor(10, 10);
  display.println("2");
  display.display();
  delay(1000);

  display.clearDisplay();
  display.setCursor(10, 10);
  display.println("1");
  display.display();
  delay(1000);

  // Initialize pins and servo
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  servo.attach(motor);
  pinMode(button, INPUT);
  
  // Initialize SoftwareSerial for MP3 communication
  mp3Serial.begin(9600);
  // Initialize the DFPlayer Mini
  if (!mp3.begin(mp3Serial)) {
    // If MP3 initialization fails, show an error on OLED
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0, 10);
    display.println("MP3 Module not found!");
    display.display();
    // Optionally, halt further execution or continue without sound.
    while(true);
  }
  // Optionally set volume (0 to 30)
  mp3.volume(25);

  // Setup random seed and servo initial position
  randomSeed(analogRead(0));
  servo.write(pos);
  servo.detach();
  servo.attach(motor);
}

// Sense left using ultrasonic sensor on trigPin/echoPin
bool senseLeft() {
  float distance, duration;
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration * 0.0343) / 2; // Convert to cm
  distance = round(distance);
  return (distance < 10);
}

// Sense right using ultrasonic sensor on trigPin2/echoPin2
bool senseRight() {
  float distance, duration;
  digitalWrite(trigPin2, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin2, LOW);
  duration = pulseIn(echoPin2, HIGH);
  distance = (duration * 0.0343) / 2; // Convert to cm
  distance = round(distance);
  return (distance < 10);
}

// Button sensing for "fire" command
bool buttonsense() {
  return (digitalRead(button) == HIGH);
}

// Joystick sensing for "reload" command
bool joysense() {
  static bool movedUp = false;
  int yValue = analogRead(joystickY);  
  if (!movedUp) {
    if (yValue > 900) {
      movedUp = true;
    }
  } else { 
    if (yValue < 300) {  
      movedUp = false;  
      return true;  
    }
  }
  return false;
}

// Move left by adjusting servo position
void moveLeft(){
  pos = pos - 30;
  servo.write(pos);
  delay(1000);
  servo.detach();
  servo.attach(motor);
}

// Move right by adjusting servo position
void moveRight(){
  pos = pos + 30;
  servo.write(pos);
  delay(1000);
  servo.detach();
  servo.attach(motor);
}

// Pick a random command (0: Left, 1: Right, 2: Fire, 3: Reload)
int command(){
  int cmd = random(4);
  if (cmd == 0 && pos == 0) {
    return 1;
  }
  if (cmd == 1 && pos == 180) {
    return 0;
  }
  return cmd;
}

// Print the command on the OLED for testing
void printCommand(int input) {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 10);

  if (input == 0) {
    display.println("LEFT!");
  } else if (input == 1) {
    display.println("RIGHT!");
  } else if (input == 2) {
    display.println("FIRE!");
  } else if (input == 3) {
    display.println("RELOAD!");
  }
  display.display();
}

// When correct input is received: display message, update score, and play a sound
void goodInput(int s) {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 10);
  display.println("GOOD " + String(s));
  display.display();
  
  // Play success sound (e.g., file 0001.mp3)
  mp3.play(1);
  delay(1000);
}

// When incorrect input is received: display fail message, show score, and play a failure sound
void badInput(int s) {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 10);
  display.println("YOU DIED");
  display.display();
  
  // Play failure sound (e.g., file 0002.mp3)
  mp3.play(2);
  delay(3000);

  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 10);
  display.println("SCORE: " + String(s));
  display.display();

  // End the game by stopping further processing
  for(;;);
}

void loop() {
  // Pick a new command if one isnâ€™t given yet
  if (!cmd_given) {
    cmd = command();
    printCommand(cmd);
    cmd_given = true;
    curr_time = 200 - 40 * log((score + 10) / 5.0);
  }

  // If running out of time, trigger a bad input
  if (curr_time < 10) {
    badInput(score);
  }

  // Process left sensor input
  if (senseLeft()) {
    if (cmd == 0) {
      moveLeft();
      score++;
      goodInput(score);
      cmd_given = false;
    } else {
      badInput(score);
    }
  }
 
  // Process right sensor input
  if (senseRight()) {
    if (cmd == 1) {
      moveRight();
      score++;
      goodInput(score);
      cmd_given = false;
    } else {
      badInput(score);
    }
  }

  // Process button input (fire command)
  if (buttonsense()) {
    if (cmd == 2) {
      score++;
      goodInput(score);
      cmd_given = false;
    } else {
      badInput(score);
    }
  }

  // Process joystick input (reload command)
  if (joysense()) {
    if (cmd == 3) {
      score++;
      goodInput(score);
      cmd_given = false;
    } else {
      badInput(score);
    }
  }

  curr_time--;
  delay(10);
}
